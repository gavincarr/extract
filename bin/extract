#!/usr/bin/perl

use strict;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Spec;
use File::Path;
use File::Rsync;

use FindBin qw($Bin $Script);
use lib "$Bin/../lib";
use Extract::Config;
use Extract::Utils qw(run_scripts);

sub usage {
  my $me = basename($Script);
  die "usage: $me [-v] [-n] [-c <config>] [-t <timeout_sec>] [<host1>] [<host2> ...]\n";
}

$|++;

my $conf_file = '/etc/extract/extract.conf';
my $timeout = 60;
my $verbose = 0;
my ($help, $noop);
usage unless GetOptions(
  'help|h|?'        => \$help,
  'verbose|v+'      => \$verbose,
  'noop|n'          => \$noop,
  'timeout|t=i'     => \$timeout,
  'config|c=s'      => \$conf_file,
);
usage if $help;

my $config = Extract::Config->new( $conf_file );

# Get list of hosts to extract from
my @hosts = @ARGV;
if (! @hosts) {
  my $hosts = $config->{EXTRACT_HOSTS} || qx($config->{EXTRACT_HOST_CMD});
  @hosts = split(/\s+/, $hosts) if $hosts;
}

usage if ! @hosts;

# Check we have other required settings
my %rsync_args = ();
my $files = '';
my $root = $config->{EXTRACT_ROOT}
  or die "Cannot find required 'EXTRACT_ROOT' property in extract.conf\n";
-d $root or die "Extract root '$root' does not exist or is not a directory\n";
-w $root or die "Extract root '$root' is not writeable\n";
if (my $tree = $config->{EXTRACT_TREE}) {
  $rsync_args{tree} = $tree;
}
if (my $files_remote = $config->{EXTRACT_FILES_REMOTE}) {
  $rsync_args{'files-from'} = ":$files_remote";
  $files = $files_remote;
}
if (my $files_local  = $config->{EXTRACT_FILES_LOCAL}) {
  $rsync_args{'files-from'} = $files_local;
  $files = $files_local;
}
die "One of EXTRACT_TREE, EXTRACT_FILES_REMOTE, or EXTRACT_FILES_LOCAL must be set in extract.conf\n"
  if scalar keys %rsync_args == 0;
die "Only one of EXTRACT_TREE, EXTRACT_FILES_REMOTE, or EXTRACT_FILES_LOCAL can be set in extract.conf\n"
  if scalar keys %rsync_args > 1;
my $remote_path = delete $rsync_args{tree} || '/';

my @pre_extract_setup = split /\s*,\s*/, $config->{PRE_EXTRACT_SETUP} if $config->{PRE_EXTRACT_SETUP};
my @pre_extract_host  = split /\s*,\s*/, $config->{PRE_EXTRACT_HOST}  if $config->{PRE_EXTRACT_HOST};
my @post_extract_host = split /\s*,\s*/, $config->{POST_EXTRACT_HOST} if $config->{POST_EXTRACT_HOST};
my @post_extract_teardown = split /\s*,\s*/, $config->{POST_EXTRACT_TEARDOWN} if $config->{POST_EXTRACT_TEARDOWN};

chdir $root or die "Cannot chdir to extract root '$root': $!\n";

# Run any pre_extract_setup scripts
run_scripts(
  type => 'pre_extract_setup',
  scripts => \@pre_extract_setup,
  params  => [ $root, $conf_file ],
  config  => $config,
  verbose => $verbose,
  noop    => $noop,
) if @pre_extract_setup;

# Iterate over hosts, doing extracts
if ($verbose) {
  $rsync_args{verbose} = 1;
}
else {
  $rsync_args{quiet} = 1;
}
$rsync_args{'dry-run'} = 1 if $noop;
my $rsync = File::Rsync->new( { archive => 1, 'copy-links' => 1, 'delete' => 1, %rsync_args })
  or die "rsync construction failed: $!\n";
for my $host (@hosts) {
  # Support user@host format hosts
  my $user = '';
  ($user, $host) = split(/\@/, $host, 2) if $host =~ m'@';
  print "+ connecting as $user\@$host\n" if $user && $verbose;
  
  # Create host dir, if required
  die "Cannot mkdir $host: $!\n" unless -d $host or mkdir $host;
  print "+ extracting from $host ...\n" if $verbose;

  # Run any pre_extract_host scripts
  run_scripts(
    type => 'pre_extract_host',
    scripts => \@pre_extract_host,
    params  => [ $root, $conf_file, $host, $files ],
    config  => $config,
    verbose => $verbose,
    noop    => $noop,
  ) if @pre_extract_host;

  # Timeout protection
  eval {
    local $SIG{ALRM} = sub { die "Timeout!" };
    alarm $timeout;

    # Do the extract rsync
    my $src = $user ? "$user\@$host:$remote_path" : "$host:$remote_path";
    if ($verbose) {
      my ($cmd) = $rsync->getcmd({ src => $src, dest => $host } );
      printf "+ %s\n", join(' ', @$cmd);
    }
    $rsync->exec({ src => $src, dest => $host });
  };
  alarm 0;
  if ($@) {
    if ($@ =~ qr/^Timeout!/) {
      print "\n** Timeout! **\n\n";
      next;
    }
    else {
      # Reraise exception
      die $@;
    }
  }

  # Process errors and output
  if ($verbose) {
    print "+ cmd: " . $rsync->lastcmd . "\n";
    if (my $out = $rsync->out) {
      print join('', @$out);
    }
  }
  my $err;
  if ($err = $rsync->err) {
    print "Errors from $host:\n  ";
    print join('  ', @$err);
  }
  print "\n" if $verbose || $err;

  # Run any post_extract_host scripts
  run_scripts(
    type => 'post_extract_host',
    scripts => \@post_extract_host,
    params  => [ $root, $conf_file, $host, $files ],
    config  => $config,
    verbose => $verbose,
    noop    => $noop,
  ) if @post_extract_host;
}

# Run any post_extract_teardown scripts
run_scripts(
  type => 'post_extract_teardown',
  scripts => \@post_extract_teardown,
  params  => [ $root, $conf_file ],
  config  => $config,
  verbose => $verbose,
  noop    => $noop,
) if @post_extract_teardown;

print "\n+ done.\n" if $verbose;

__END__

=head1 NAME

extract - a utility to copy a set of files off one or more remote hosts
into a set of local host trees

=head1 SYNOPSIS

    extract [-v] [-n] [-c <config_file>] [-t <timeout_secs>] [<host1> [<host2> ...]]

=head1 DESCRIPTION

extract is a utility to copy a set of files off one or more remote hosts
into a set of local host trees. Implemented using rsync.

It requires the list of files to extract to be available either locally,
or on the remote machine. I typically use
L<rpm-find-changes|http://ofn.me/rfc> to generate a list of files to
extract on remote RedHat/CentOS machines.

=head2 OPTIONS

=over 4

=item --config | -c <config_file>

Config file. Default: C</etc/extract/extract.conf>.

=item --timeout | -t <timeout_secs>

Timeout period (in seconds) applicable to the actual extraction. Default: 60s.

=item --verbose | -v

Show verbose messages (may be repeated).

=item --noop | -n

Show what would be done, but don't actually do the extract.

=back

=head2 CONFIGURATION

extract is configured via a shell-variable-style config file, which can
be given on the commmand line with the C<-c> option, and defaults to
C</etc/extract/extract.conf>.

The following variables can be configured:

=over 4

=item EXTRACT_ROOT

Location where extracted files are to be stored, in per-host trees.

=item EXTRACT_HOSTS

List of hosts (quoted, space separated) to extract files from.

=item EXTRACT_HOST_CMD

Alternative to EXTRACT_HOSTS: a command to execute which returns a list
of (space-separated) hosts from which to extract files.

=item EXTRACT_FILES_REMOTE

Fully-qualified path on the remote machine containing the list of files
to extract.

=item EXTRACT_FILES_LOCAL

Fully qualified path on the local machine containing the list of files
to extract.

=item EXTRACT_TREE

Tree on the remote server which should be extracted in its entirety.

=back

=head3 HOOK SCRIPTS

Extract also supports running arbitrary scripts before and after file
extraction. It ships with example scripts to load ssh keys before
extraction, and to commit extracted files to git or bzr repositories.

Hook scripts can be bare names, in which case they are expected to be
found in /etc/extract/scripts, or they can be fully qualified paths.
Multiple scripts can be specified by making them comma-separated.

Scripts can be written in any language you like. Return codes from
scripts are ignored.

=over 4

=item PRE_EXTRACT_SETUP

Script(s) to be run once at beginning of the extraction run.

Scripts are passed two parameters: the EXTRACT_ROOT location; and the
fully-qualified path to the extract.conf file.

=item PRE_EXTRACT_HOST

Script(s) to be run once per host, before the extract begins.

Scripts are passed four parameters: the EXTRACT_ROOT location; the
fully-qualified path to the extract.conf file; the hostname of the
host we are extracting from; and the filename given in
EXTRACT_FILES_REMOTE or EXTRACT_FILES_LOCAL.

=item POST_EXTRACT_HOST

Script(s) to be run once per host, after the extract has completed.

Scripts are passed four parameters: the EXTRACT_ROOT location; the
fully-qualified path to the extract.conf file; the hostname of the
host we are extracting from; and the filename given in
EXTRACT_FILES_REMOTE or EXTRACT_FILES_LOCAL.

=item POST_EXTRACT_TEARDOWN

Script(s) to be run once at the end of the extraction run.

Scripts are passed two parameters: the EXTRACT_ROOT location; and the
fully-qualified path to the extract.conf file.

=back

=head1 AUTHOR

Gavin Carr <gavin@openfusion.com.au>

=head1 LICENCE

Copyright 2007-2012, Gavin Carr.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
