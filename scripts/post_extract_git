#!/bin/bash
#
# Post_extract script, committing any changes to a git branch.
#

die() {
  echo $*
  exit 99
}

# Setup $CONFIG_DIR
CONFIG_DIR=/etc/extract
test -d $CONFIG_DIR || CONFIG_DIR=$(basename $0)/../conf
test -d $CONFIG_DIR || die "Cannot find config directory - aborting"

test -f $CONFIG_DIR/extract.conf || die "No extract.conf file found in config dir $CONFIG_DIR"

. $CONFIG_DIR/extract.conf

ROOT=$1
HOST=$2
#FILE=$3

test -n "$ROOT" -a -n "$HOST" || die "usage: $(basename $0) <extract_root> <host>"

test -z "$GIT" && GIT=/usr/bin/git
test -x $GIT || die "Cannot find git executable"

# If $EXTRACT_GIT_REPO_MODE is ALL, we use a single git repo per host
if [ "$EXTRACT_GIT_REPO_MODE" == ALL ]; then
  cd $ROOT || die "Cannot cd to '$ROOT'"
  test -d .git || $GIT init || die "git init failed"
fi

DIR="$ROOT/$HOST"
cd $DIR || die "Cannot cd to '$DIR'"

# If $EXTRACT_GIT_REPO_MODE is HOST, we use a separate git repo for each host
if [ "$EXTRACT_GIT_REPO_MODE" == HOST ]; then
  test -d .git || $GIT init || die "git init failed"
fi

# git doesn't seem to have a simple way to tell if there are outstanding changes 
# to commit. 'git status .' reports untracked parent-sibling directories, for instance.
# So just commit blindly in the knowledge that empty commits won't go through.

# Add and commit any changes (git commit -a doesn't work with paths, apparently)
$GIT add . && \
$GIT commit -m "Changes to '$(basename $PWD)' to $(date '+%Y-%m-%d %H:%M:%S')." .

